#!/usr/bin/env python3

######################################################################
#
# Access our plugin (both directly and via NCrystal) and make some cross
# section plots (sampling of scattering events can of course also be
# done). First some imports and loading of our plugin:
#
import NCrystal as NC
import ncplugin#<--- our own module developed here
import numpy as np
import matplotlib.pyplot as plt
ncplugin.registerPlugin()#<---register our plugin with NCrystal

######################################################################
#
# For the test here we register two custom data files with NCrystal,
# the content is identical apart from the @CUSTOM_... section
#

newmodel_sigma = 2.0
newmodel_lambda_cutoff = 5.0

dummyal="""NCMAT v3
@CELL
 lengths 4.04958 4.04958 4.04958
 angles 90 90 90
@SPACEGROUP
  225
@ATOMPOSITIONS
  Al 0   1/2 1/2
  Al 0     0   0
  Al 1/2 1/2   0
  Al 1/2   0 1/2
@DEBYETEMPERATURE
  Al   410.4
"""

customsection='@CUSTOM_%s\n  %g %g\n'%( ncplugin.pluginName().upper(),
                                        newmodel_sigma,
                                        newmodel_lambda_cutoff )
NC.registerInMemoryFileData('stdAl.ncmat', dummyal)
NC.registerInMemoryFileData('customAl.ncmat', dummyal+customsection)

######################################################################
#
# Create physics model with/without our custom replacement of the
# incoherent-elastic componnent, by loading the files we just registered
# above:
#
sc_std = NC.createScatter("stdAl.ncmat")
sc_std_incelas_only = NC.createScatter("stdAl.ncmat;inelas=0;coh_elas=0")
sc_plugin = NC.createScatter("customAl.ncmat")
sc_plugin_incelas_only = NC.createScatter("customAl.ncmat;inelas=0;coh_elas=0")

######################################################################
#
# Plot with matplotlib:
#
wls = np.linspace(0.01,10.0,1000)
plt.plot( wls, sc_std.xsect(wl=wls), label='Standard NCrystal' )
plt.plot( wls, sc_plugin.xsect(wl=wls), label='With new plugin' )
plt.plot( wls, sc_std_incelas_only.xsect(wl=wls), label='Standard NCrystal [only inc. elas.]' )
plt.plot( wls, sc_plugin_incelas_only.xsect(wl=wls), label='With new plugin [only inc. elas.]' )

######################################################################
#
# Also access and plot our plugin's C++ class "PhysicsModel" directly via our
# custom python hooks, without going through the standard NCrystal
# infrastructure:
#
pm = ncplugin.PhysicsModel( sigma=newmodel_sigma, lambda_cutoff=newmodel_lambda_cutoff )
plt.plot(wls, pm.calcDiffCrossSection(NC.wl2ekin(wls)),
         ls=':',lw=3,label='Directly from new PhysicsModel')

######################################################################
#
# Finish and launch plot:
#
plt.xlabel('angstrom')
plt.ylabel('barn')
plt.legend()
plt.grid()
plt.semilogy()
plt.show()
